import numpy as np
import xarray
import time
import pandas as pd
from ice_flux_algo import computeGatesOnce

# Create dataframe for SIA fluxes per gate
def create_excel_file(iceFluxesByMonth, output_file):
    start_time = time.time()
    # Create an empty DataFrame
    df = pd.DataFrame(columns=['Date',
                               'Admundsen',
                               'Mclure',
                               'Ballantyne',
                               'Wilkins',
                               'Gust',
                               'Peary',
                               'Sverdrup',
                               'Nares',
                               'Jones',
                               'Lancaster',
                               'Cardigan',
                               'Hell',
                               'Penny',
                               'Wellington',
                               'McDougall',
                               'BMC',
                               'Byam',
                               'Austin',
                               'Kellett',
                               'Crozier',
                               'Fitzwilliam',
                               'Nansen',
                               'Eureka',
                               'Fram'
                               'files'])
    for month, dataByMonth in iceFluxesByMonth.items():
        # Create a new row for the DataFrame
        row = pd.Series({
            'Date': month,
            'Admundsen': dataByMonth['Amundsen'],
            'Mclure':  dataByMonth["M'Clure"],
            'Ballantyne':  dataByMonth['Ballantyne'],
            'Wilkins':  dataByMonth['Wilkins'],
            'Gust':  dataByMonth['Pr. Gustaf Adolf'],
            'Peary':  dataByMonth['Peary'],
            'Sverdrup':  dataByMonth['Sverdrup'],
            'Nares':  dataByMonth['Nares'],
            'Jones':  dataByMonth['Jones'],
            'Lancaster':  dataByMonth['Lancaster'],
            'Cardigan': dataByMonth['Cardigan'],
            'Hell': dataByMonth['Hell'],
            'Penny': dataByMonth['Penny'],
            'Wellington': dataByMonth['Wellington'],
            'McDougall': dataByMonth['McDougall'],
            'BMC': dataByMonth['Byam Martin Channel'],
            'Byam': dataByMonth['Byam Channel'],
            'Austin': dataByMonth['Austin Channel'],
            'Kellett': dataByMonth['Kellett Strait'],
            'Crozier': dataByMonth['Crozier Channel'],
            'Fitzwilliam': dataByMonth['Fitzwilliam'],
            'Nansen': dataByMonth['Nansen Sound'],
            'Eureka': dataByMonth['Eureka Sound'],
            'Fram': dataByMonth['Fram'],
            })
        # Append the row to the DataFrame
        df = pd.concat([df, pd.DataFrame([row])], ignore_index=True)

    # Save the DataFrame to an Excel file
    df.to_excel(output_file)

    print("Elapsed Time:", time.time() - start_time, "seconds")

# This function computes the free drift velocity of sea ice (thin sea ice with no internal stresses).
# Inputs : alpha (coefficient that includes densities of ice, water and drag coefficients), theta (turning angle - degrees), u_a (wind velocity), u_w (water velocity)
# Output: u_i (free drift velocity)
def freeDrift(alpha,theta, u_ax, u_ay, u_wx, u_wy):
    magnitudeWind = np.sqrt(u_ax**2 + u_ay**2)
    angle_u = np.arctan2(u_ay, u_ax)
    new_angle  = angle_u-(theta*np.pi/180)
    new_u_ax = magnitudeWind * np.cos(new_angle)
    new_u_ay = magnitudeWind * np.sin(new_angle)
    ui_x = (alpha* new_u_ax) + u_wx
    ui_y = (alpha* new_u_ay) + u_wy
    return ui_x, ui_y, new_u_ax, new_u_ay


def callGatesCESM_HR():
    """
    Function to get grid index of all points of gates. Computed automatically from the algorithm in ice_flux_algo.py.
    Adjusted manually to get rid of gate segments on land which would not account for any sea ice transport.

    Returns: 
    gates = []: gates name, edge coordinates and pixel indices
    """
    cesm_grid = xarray.open_dataset(r'/aos/home/mfol/Data/CESM/domain.ocn.tx0.1v2_090218.nc', decode_times=False)

    tlon = cesm_grid.xc
    tlat = cesm_grid.yc

    gates = [
        {'name': "Amundsen", 'shortName': 'Adm', 'coord' : [360-127.7, 70.5, 360-125.27, 72.17], 'slopeFactor': 0},
        {'name': "M'Clure", 'shortName': 'Mclure','coord' : [236.0, 74.4, 360-122.2, 76.02], 'slopeFactor': 0}, #-124W = 236, -122.4 = 237.6
        {'name': "Ballantyne", 'shortName': 'Ball','coord' : [360-116.47, 77.56, 360-115.06, 77.95], 'slopeFactor': 0},
        {'name': "Wilkins", 'shortName': 'Wilk','coord' : [360-114.3, 78.08, 360-113.10, 78.3], 'slopeFactor': 0},
        {'name': "Pr. Gustaf Adolf", 'shortName': 'Gust','coord' : [360-110.4, 78.75, 360-105.5, 79.2], 'slopeFactor': 0},
        {'name': "Peary", 'shortName': 'Peary','coord' : [360-103.78, 79.35, 360-100.0, 79.9], 'slopeFactor': 0},
        {'name': "Sverdrup", 'shortName': 'Sv','coord' : [360-99.05, 80.10, 360-96.3, 80.3], 'slopeFactor': 0},
        {'name': "Nares", 'shortName': 'Nares','coord' : [360-61.36, 82.24, 360-59.9, 82.02], 'slopeFactor': np.pi},
        {'name': "Jones", 'shortName': 'Jones','coord' : [360-81.5, 75.78, 360-80.9, 76.2], 'slopeFactor': np.pi},
        {'name': "Lancaster", 'shortName': 'Lanc','coord' : [360-81.9, 73.7, 360-81.89, 74.52], 'slopeFactor': 0},
        {'name': "Cardigan", 'shortName': 'Card','coord' : [360-90.55, 76.6, 360-90.21, 76.55], 'slopeFactor': 0},
        {'name': "Hell", 'shortName': 'Hell','coord' : [360-89.84, 76.56, 360-89.5, 76.55], 'slopeFactor': 0},
        {'name': "Penny", 'shortName': 'Penny','coord' : [360-97.73, 76.5, 360-96.4, 76.67], 'slopeFactor': 0},
        {'name': "Wellington", 'shortName': 'Well','coord' : [360-93.5, 74.87, 360-91.95, 74.88], 'slopeFactor': 0},
        {'name': "McDougall", 'shortName': 'McDoug','coord' : [360-97.66, 75.16, 360-96.5, 75.07], 'slopeFactor': 0},
        {'name': "Byam Martin Channel", 'shortName': 'BMC','coord' : [360-105.68, 75.80, 360-103.65, 75.92], 'slopeFactor': 0},
        {'name': "Byam Channel", 'shortName': 'Byam','coord' : [360-105.93, 75.2, 360-104.68, 75.21], 'slopeFactor': 0},
        {'name': "Austin Channel", 'shortName': 'Austin','coord' : [360-103.93, 75.39, 360-102.52, 75.59], 'slopeFactor': 0},
        {'name': "Kellett Strait", 'shortName': 'Kellett','coord' : [360-118.6, 75.6, 360-117.46, 75.3], 'slopeFactor': np.pi},
        {'name': "Crozier Channel", 'shortName': 'Crozr','coord' : [360-119.89, 75.9, 360-119.07, 75.7], 'slopeFactor': np.pi},
        {'name': 'Fitzwilliam', 'shortName': 'Fitz', 'coord': [360-116.1, 76.66, 360-115.38, 76.44], 'slopeFactor': np.pi},
        {'name': "Nansen Sound", 'shortName': 'Nansn','coord' : [360-93.19, 81.3, 360-91.0, 81.60], 'slopeFactor': np.pi},
        {'name': "Eureka Sound", 'shortName': 'Eurka','coord' : [360-88.84, 78.2, 360-87.32, 78.17], 'slopeFactor': np.pi},
        {'name': "Fram", 'shortName': 'Fram','coord' : [360-19.8, 79.0,  13.83, 79.0], 'slopeFactor': 0}, #The_Granular_Sea_Ice_Model_in_Spherical_Coordinate.pdf JF Lemieux et Tremblay
        ]


    gates = computeGatesOnce(gates, tlon, tlat)
    # Based on computeGatesOnce output, adjust gates manually
    gates[0]['gate'] = [(2238, 3143), (2239, 3143), (2240, 3143), (2240, 3142), (2241, 3142), (2241, 3141), (2242, 3141), (2242, 3140), (2243, 3140),(2243, 3139), (2244, 3139), (2245, 3139), (2245, 3138), (2246, 3138), (2246, 3137), (2247, 3137), (2247, 3136), (2248, 3136),(2248, 3135), (2249, 3135), (2250, 3135), (2250, 3134), (2251, 3134), (2251, 3133), (2252, 3133), (2252, 3132), (2253, 3132),(2253, 3131), (2254, 3131), (2255, 3131), (2255, 3130), (2256, 3130), (2256, 3129), (2257, 3129), (2258, 3129), (2258, 3128), (2259, 3128), (2259, 3127), (2260, 3127), (2260, 3126), (2261, 3126), (2261, 3125), (2262, 3125),  (2263, 3125), (2263, 3124), (2264, 3124), (2264, 3123), (2265, 3123), (2265, 3122), (2266, 3122), (2266, 3121), (2267, 3121), (2267, 3120), (2268, 3120), (2269, 3120), (2269, 3119), (2270, 3119), (2271, 3119)]#, (2271, 3118), (2271, 3117), (2272, 3117), (2273, 3117)]
    gates[1]['gate'] = [(2306, 3065), (2306, 3064), (2306, 3063), (2307, 3063), (2307, 3062), (2307, 3061),(2308, 3061), (2308, 3060), (2309, 3060), (2309, 3059), (2309, 3058),(2310, 3058), (2310, 3057), (2310, 3056), (2311, 3056), (2311, 3055), (2312, 3055), (2312, 3054), (2312, 3053), (2312, 3052), (2313, 3052), (2314, 3052), (2314, 3051), (2314, 3050), (2315, 3050), (2315, 3049), (2315, 3048),  (2315, 3047), (2316, 3047), (2317, 3047), (2317, 3046), (2317, 3045), (2318, 3045), (2318, 3044), (2319, 3044), (2319, 3043), (2319, 3042), (2320, 3042), (2320, 3041), (2320, 3040), (2321, 3040), (2321, 3039), (2322, 3039), (2322, 3038), (2322, 3037), (2323, 3037), (2323, 3036), (2324, 3036), (2324, 3035), (2324, 3034), (2325, 3034), (2325, 3033), (2325, 3032), (2326, 3032)]#, (2326, 3031)]
    gates[2]['gate'] = [(2367, 2999), (2367, 2998), (2368, 2998), (2368, 2997), (2369, 2997), (2369, 2996), (2370, 2996), (2370, 2995), (2371, 2995), (2371, 2994), (2372, 2994), (2372, 2993), (2373, 2993), (2373, 2992), (2374, 2992), (2374, 2991), (2375, 2991)] #(2366, 3000), (2366, 2999),
    gates[3]['gate'] = [(2378, 2988), (2379, 2988), (2379, 2987), (2380, 2987), (2380, 2986), (2381, 2986), (2381, 2985), (2382, 2985), (2382, 2984), (2383, 2984), (2383, 2983), (2384, 2983)] #(2378, 2989),, (2385, 2983)
    gates[4]['gate'] = [(2399, 629), (2399, 630),(2398, 630),(2397, 630),(2397, 631),(2396, 631),(2396, 632),(2395, 632),(2394, 632),(2393, 632),(2392, 632),(2392, 633),(2391, 633),(2390, 633),(2389, 633),(2389, 634),(2388, 634),(2387, 634),(2386, 634),(2386, 635),(2385, 635),(2384, 635),(2384, 636),(2383, 636),(2383, 637),(2382, 637),(2381, 637),(2380, 637)]
    gates[5]['gate'] = [(2372, 645), (2372, 646), (2371, 646), (2371, 647), (2371, 648), (2370, 648), (2370, 649), (2369, 649), (2369, 650), (2368, 650), (2368, 651), (2367, 651), (2367, 652), (2367, 653), (2366, 653), (2366, 654), (2365, 654), (2365, 655), (2364, 655), (2364, 656), (2363, 656), (2363, 657), (2362, 657), (2362, 658), (2362, 659), (2361, 659), (2361, 660), (2360, 660), (2360, 661)]
    gates[6]['gate'] = [(2357, 667), (2356, 667), (2355, 667), (2355, 668), (2354, 668), (2354, 669), (2353, 669), (2353, 670), (2352, 670), (2351, 670), (2351, 671), (2350, 671), (2350, 672), (2349, 672), (2349, 673), (2348, 673), (2348, 674)]#, (2348, 675)
    gates[7]['gate'] = [(2271, 779), (2272, 779), (2273, 779), (2274, 779), (2275, 779), (2276, 779), (2277, 779)]
    gates[8]['gate'] = [(2245, 608), (2245, 609), (2245, 610), (2246, 610), (2246, 611), (2246, 612), (2246, 613), (2247, 613), (2247, 614), (2247, 615), (2247, 616), (2247, 617)] #(2245, 606), (2245, 607), , (2248, 617)
    gates[9]['gate'] = [(2220, 566), (2220, 567), (2221, 567), (2221, 568), (2222, 568), (2222, 569), (2222, 570), (2223, 570), (2223, 571), (2224, 571), (2224, 572), (2224, 573), (2225, 573), (2225, 574), (2226, 574), (2226, 575), (2226, 576), (2227, 576), (2227, 577), (2228, 577), (2228, 578), (2228, 579), (2229, 579), (2229, 580), (2230, 580), (2230, 581)]
    gates[10]['gate'] = [(2296, 598), (2295, 598), (2294, 598)]
    gates[11]['gate'] = [(2291, 598), (2290, 598), (2289, 598), (2289, 599)] # Hell not resolved
    gates[12]['gate'] = [(2331, 582),(2330, 582), (2329, 582), (2329, 583), (2329, 584), (2328, 584), (2328, 585), (2327, 585), (2327, 586), (2327, 587), (2326, 587), (2326, 588)]
    gates[13]['gate'] = [(2294, 550), (2293, 550), (2293, 551), (2292, 551), (2291, 551), (2291, 552), (2290, 552), (2289, 552), (2288, 552), (2288, 553), (2287, 553), (2286, 553)]
    gates[14]['gate'] = [(2323, 548), (2322, 548), (2321, 548), (2320, 548), (2319, 548), (2318, 548), (2317, 548), (2316, 548), (2315, 548)]
    gates[15]['gate'] = [(2371, 554), (2370, 554), (2370, 555), (2369, 555), (2368, 555), (2367, 555), (2367, 556), (2366, 556), (2365, 556), (2364, 556), (2364, 557), (2363, 557), (2362, 557),(2362, 558)]
    gates[16]['gate'] = [(2373, 539), (2372, 539), (2371, 539), (2370, 539), (2369, 539), (2368, 539), (2367, 539)]
    gates[17]['gate'] = [(2360, 545), (2360, 546), (2359, 546), (2358, 546), (2358, 547), (2357, 547), (2357, 548), (2356, 548), (2356, 549), (2355, 549), (2354, 549), (2354, 550), (2354, 551)]
    gates[18]['gate'] = [(2349, 3047), (2349, 3048), (2349, 3049), (2350, 3049), (2350, 3050), (2351, 3050), (2351, 3051), (2351, 3052), (2352, 3052), (2352, 3053), (2353, 3053)]
    gates[19]['gate'] = [(2342, 3036), (2342, 3037), (2343, 3037), (2343, 3038),(2343, 3039), (2343, 3040), (2344, 3040), (2344, 3041),(2344, 3042)]
    gates[20]['gate'] = [(2366, 3021), (2366, 3022), (2366, 3023), (2367, 3023), (2367, 3024), (2367, 3025), (2368, 3025), (2368, 3026), (2368, 3027)]
    gates[21]['gate'] = [(2343, 702), (2343, 703), (2342, 703), (2342, 704), (2342, 705), (2341, 705), (2341, 706),  (2341, 707), (2341, 708), (2341, 709)]
    gates[22]['gate'] = [(2303, 637), (2302, 637), (2301, 637), (2300, 637), (2300, 638), (2299, 638), (2299, 639), (2298, 639), (2298, 640)]
    gates[23]['gate'] = [(2179, 900),(2179, 901),(2179, 902),(2179, 903),(2179, 904),(2179, 905),
        (2179, 906),(2179, 907),(2179, 908),(2179, 909),(2179, 910),(2180, 910),(2180, 911),(2180, 912),(2180, 913),(2180, 914),(2180, 915),
        (2180, 916),(2180, 917),(2180, 918),(2180, 919),(2180, 920),(2180, 921),(2180, 922),(2180, 923),(2180, 924),(2181, 924),(2181, 925),
        (2181, 926),(2181, 927),(2181, 928),(2181, 929),(2181, 930),(2182, 930),(2182, 931),(2182, 932),(2182, 933),(2182, 934),(2182, 935),(2182, 936),
        (2182, 937),(2182, 938),(2182, 939),(2182, 940),(2183, 940),(2183, 941),(2183, 942),(2183, 943),(2183, 944),(2183, 945),(2183, 946),(2183, 947),(2183, 948),
        (2183, 949),(2183, 950),(2183, 951),(2184, 951),(2184, 952),(2184, 953),(2184, 954),(2185, 954),(2185, 955),(2185, 956),(2185, 957),(2185, 958),(2185, 959),
        (2185, 960),(2186, 960),(2186, 961),(2186, 962),(2186, 963),(2186, 964),(2186, 965),(2186, 966),(2186, 967),(2186, 968),(2187, 968),
        (2187, 969),(2187, 970),(2187, 971),(2187, 972),(2187, 973),(2188, 973),(2188, 974),(2188, 975),(2188, 976),
        (2189, 976),(2189, 977),(2189, 978),(2189, 979),(2189, 980),(2189, 981),(2189, 982),(2189, 983),(2190, 983),(2190, 984),
        (2190, 985),(2190, 986),(2190, 987),(2190, 988),(2191, 988),(2191, 989),(2191, 990),(2191, 991),(2192, 991),
        (2192, 992),(2192, 993),(2192, 994),(2192, 995),(2192, 996),(2193, 996),(2193, 997),(2193, 998),(2193, 999),
        (2193, 1000),(2194, 1000),(2194, 1001),(2194, 1002),(2194, 1003),(2195, 1003),(2195, 1004),(2195, 1005),
        (2195, 1006),(2196, 1006),(2196, 1007),(2196, 1008),(2196, 1009),(2196, 1010),(2197, 1010),(2197, 1011),
        (2197, 1012),(2197, 1013),(2197, 1014),(2198, 1014),(2198, 1015),(2199, 1015),(2199, 1016),(2199, 1017),
        (2200, 1017),(2200, 1018),(2200, 1019),(2200, 1020),(2201, 1020),(2201, 1021),(2201, 1022),(2201, 1023),
        (2202, 1023),(2202, 1024),(2202, 1025),(2202, 1026),(2203, 1026),(2203, 1027),(2203, 1028),(2203, 1029),(2203, 1030),(2203, 1031),(2203, 1032),(2203, 1033)]
    return gates